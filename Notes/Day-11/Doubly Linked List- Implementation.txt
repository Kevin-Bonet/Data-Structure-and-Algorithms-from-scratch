//global variables exist and are accessible in memory
//throughout the lifetime of an executing application
//if the variable was in a fucntion, it would be a local variable
//and only last (in the stack part of the memory) the duration of a function call
//for a more useful storage of information, store things in the heap
// using malloc and manage with pointer variables

struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
}

       head pointer
         |
         v
null<-head node<-->node 2<-->node 3->null

Implementation:

#include<stdio.h>
#include<stdlib.h>

struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

struct Node* head; // global

struct Node* GetNewNode(int x) {
    struct Node newNode;
    newNode.data = x;
    newNode.prev = NULL;
    newNode.next = NULL;
    return &newNode;
}

void InsertAtHead(int x) {
    struct Node* newNode = GetnewNode(x); //no the same newNode as one in GetNewNode
    if(head == NULL) {
        head = newNode;
        return;
    }
    head->prev = newNode;
    newNode-> = head;
    head = newNode;
}

void Print() {
    struct Node* temp = head;
    printf("Forward: ");
    while(temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void ReversePrint() {
    struct Node* temp = head;
    if(temp == NULL) return; //empty list, exit
    //going to last node
    while(temp->next != NULL) {
        temp = temp->next;
    }
    printf("Reverse: ");
    while(temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->prev;
    }
    printf("\n");
} 

int main() {
    head = Null;
    InsertAtHead(2); Print(); ReversePrint();
    InsertAtHead(4); Print(); ReversePrint();
    InsertAtHead(6); Print(); ReversePrint();
}

//homework, try doing insert at tail