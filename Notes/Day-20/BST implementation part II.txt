/*allocation and deallocation can only be done in the heap
memory areas on the computer:
a) heap
b) stack
c) static/global
d) code (text)

the overall flow of the code is:
1) make an empty root pointer
2) make a root node and have the root pointer point to it
3) make a new node, depending if bigger or smaller data than node place it 
right or left and have the respective root node point to it
4) keep making new nodes and place them where appropriate and 
have the appropriate pointer allocations
*/
#include<iostream>
using namespace std;
struct BstNode {
    int data;
    BstNode* left;
    BstNode* right;
};

BstNode* GetNewNode(int data){
    BstNode* newNode = new BstNode();
    newNode->data = data; // or (*newNode).data = data; 
    newNode->left = newNode->right = NULL;
    return newNode;
}

BstNode* Insert(BstNode* root, int data){
    if(root == NULL){
        root = GetNewNode(data);
    }
    else if(data <= root->data){
        root->left = Insert(root->left, data);
    }
    else{
        root->right = Insert(root->right, data);
    }
    return root;
}

bool Search(BstNode* root, int data){
    if(root==NULL) return false;
    else if(root->data == data) return true;
    else if(data <= root->data) return Search(root->left,data);
    else return Search(root->right,data);
}

int main(){
BstNode* root = NULL; //creating an empty tree
root = Insert(root, 15);
root = Insert(root, 10);
root = Insert(root, 20);
root = Insert(root, 25);
root = Insert(root, 8);
root = Insert(root, 12);
int number;
cout<<"Enter number to be searched (try 15,10,20,25,8, or 12)\n";
cin>>number;
if(Search(root,number) == true) cout<<"Found\n";
else cout<<"Not Found\n";
}