-head node, several nodes with their data and next address 

-we will do a print and a reverse print 

-the returns of a function like insert depend on if we need to keep modifying a variable in the main function 

-this approach is less efficient than iterative approach 

 

#include<stdlib.h>  

#include<stdio.h>   

struct Node {   

    int data;   

    struct Node* next;   

};   

void Print(struct Node* p) {   

if(p == NULL) return;  

printf("%d ",p->data);  

Print(p->next);  

}   

void reversePrint(struct Node* p) {  

if(p == NULL) return;  

reversePrint(p->next);  

printf("%d ",p->data);  

}   

struct Node* Insert(Node* head, int data) {   

    Node *temp = (struct Node*)malloc(sizeof(struct Node));   

    temp->data = data;   

    temp->next = NULL;   

    if (head == NULL) {  

        head = temp;  

    }  

else {  

Node* temp1 = head;  

while(temp1->next != NULL) temp1 = temp1->next;  

temp1->next = temp;  

}  

return head;  

}   

int main() {  

struct Node* head = NULL;  

head = Insert(head, 2);  

head = Insert(head, 4);  

head = Insert(head, 6);  

head = Insert(head, 5);  

Print(head);  

}  

 

confirmed working using https://www.programiz.com/cpp-programming/online-compiler/ 

note about reversePrint, all you do is write reverse before the print in the main function. i tried to write one after the other but for unknown reasons it doesnt work  