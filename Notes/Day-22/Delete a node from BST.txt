case 1: no child
case 2: 1 child
case 3: 2 children
    a)find min in right 
    copy the value in targetted node
    delete duplicate from right subtree 
    b)find max in left
    copy the value in targetted node
    delete duplicate from left subtree 

#include<iostream>
using namespace std;
struct Node{
    int data;
    struct Node *left;
    struct Node *right;
};

struct Node* Delete(struct Node *root, int data){
    if(root == NULL) return root;
    else if(data < root->data) root->left = Delete(root->left,data);
    else if(data > root->data) root->right = Delete(root->right,data);
    else{ //found node to be deleted
        //case 1: No child
        if(root->left == NULL && root->right == NULL){
            delete root;
            root = NULL;
        }
        //case 2: One child
        else if(root->left == NULL){
            struct Node *temp = root;
            root = root->right;
            delete temp;
        }
        else if(root->right == NULL){
            struct Node *temp = root;
            root = root->left;
            delete temp;
        }
        //case 3: two children
        else {
            struct Node *temp = FindMin(root->right);
            root->data = temp->data;
            root->right = Delete(root->right,temp->data);
        }
    }
    return root;
}